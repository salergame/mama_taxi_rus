import 'package:flutter/material.dart';
import 'dart:async';
import 'dart:typed_data';
import 'dart:math';
import 'package:permission_handler/permission_handler.dart';
import 'package:yandex_mapkit/yandex_mapkit.dart'
    show
        YandexMapController,
        YandexMap,
        Point,
        PlacemarkMapObject,
        PolylineMapObject,
        Polyline,
        MapObjectId,
        CameraUpdate,
        CameraPosition,
        YandexDriving,
        RequestPoint,
        RequestPointType,
        DrivingOptions,
        PlacemarkIcon,
        PlacemarkIconStyle,
        BitmapDescriptor;
import 'package:supabase_flutter/supabase_flutter.dart';
import '../utils/constants.dart';
import '../widgets/driver_sidebar.dart';
import '../services/supabase_service.dart';
import '../services/app_location.dart';
import '../services/location_service.dart';
import '../services/map_service.dart';
import '../models/user_model.dart';
import '../models/driver_model.dart';
import '../models/order_model.dart';
import '../widgets/custom_yandex_map.dart';
import '../widgets/native_yandex_map.dart';
import '../widgets/city_selector_widget.dart';
import 'package:yandex_mapkit/yandex_mapkit.dart'
    show
        YandexSearch,
        SearchSession,
        SearchOptions,
        SearchResult,
        Point,
        PlacemarkMapObject,
        PlacemarkIconStyle,
        YandexDriving,
        DrivingSession,
        DrivingOptions,
        DrivingRoute,
        PolylineMapObject,
        Polyline,
        PolylineStyle,
        YandexSuggest,
        SuggestSession,
        SuggestOptions,
        SuggestItem,
        SuggestType;

class DriverMapScreen extends StatefulWidget {
  const DriverMapScreen({super.key});

  @override
  State<DriverMapScreen> createState() => _DriverMapScreenState();
}

class _DriverMapScreenState extends State<DriverMapScreen> {
  // –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∏–∂–Ω–∏–º –±–∞—Ä–æ–º
  final DraggableScrollableController _bottomSheetController =
      DraggableScrollableController();

  // –°–æ—Å—Ç–æ—è–Ω–∏—è –Ω–∏–∂–Ω–µ–≥–æ –±–∞—Ä–∞
  double _initialSheetSize = 0.3; // –ù–∞—á–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä (30% —ç–∫—Ä–∞–Ω–∞)
  double _minSheetSize = 0.1; // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä (10% —ç–∫—Ä–∞–Ω–∞)
  double _maxSheetSize = 0.7; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä (70% —ç–∫—Ä–∞–Ω–∞)

  // –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
  String _orderStatus =
      'available'; // available, assigned, inProgress, waitingForClient, completed

  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–æ–¥–∏—Ç–µ–ª—è
  double _todayEarnings = 0.0;
  int _todayTrips = 0;
  double _totalEarnings = 0.0;
  int _totalTrips = 0;
  double _driverRating = 5.0;
  Duration _todayOnlineTime = Duration.zero;
  DateTime _onlineStartTime = DateTime.now();
  
  // –¢–∞–π–º–µ—Ä—ã
  Timer? _testOrderTimer;
  Timer? _waitingTimer;
  int _waitingMinutes = 0;
  int _waitingSeconds = 0;
  double _waitingFee = 0.0;
  
  // –ú–∞—Ä—à—Ä—É—Ç—ã
  bool _isRouteToClient = true; // true - –∫ –∫–ª–∏–µ–Ω—Ç—É, false - –∫ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—é
  
  // –í—Ä–µ–º—è –¥–æ –ø—Ä–∏–±—ã—Ç–∏—è –∫ –∫–ª–∏–µ–Ω—Ç—É
  Duration? _estimatedTimeToClient;
  Duration? _estimatedTimeToDestination;

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
  bool _isSidebarOpen = false;

  // –°–µ—Ä–≤–∏—Å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ Supabase
  final SupabaseService _supabaseService = SupabaseService();
  // –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–≤–æ–¥–∏—Ç–µ–ª—å)
  UserModel? _currentDriver;
  bool _isLoading = true;
  bool _isOnline = false;

  // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
  StreamSubscription<bool>? _statusSubscription;
  
  // –ö–∞—Ä—Ç–∞ –∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
  YandexMapController? _mapController;
  final LocationService _locationService = LocationService();
  Point? _currentLocation;
  bool _isMapInitialized = false;
  
  // –ú–∞—Ä–∫–µ—Ä—ã –∏ –º–∞—Ä—à—Ä—É—Ç—ã
  final List<PlacemarkMapObject> _placemarks = [];
  PolylineMapObject? _routePolyline;
  
  // –ó–∞–∫–∞–∑—ã
  List<OrderModel> _availableOrders = [];
  OrderModel? _currentOrder;
  
  // –§–∏–ª—å—Ç—Ä –ø–æ –≥–æ—Ä–æ–¥—É
  String _selectedCity = '–í—Å–µ –≥–æ—Ä–æ–¥–∞';
  final MapService _mapService = MapService();

  @override
  void initState() {
    super.initState();
    _loadDriverData();
    _loadDriverStatus();
    _loadDriverStatistics();
    _initializeLocation();
    _loadAvailableOrders();

    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
    _statusSubscription =
        _supabaseService.driverStatusStream.listen((isOnline) {
      debugPrint('–ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞: $isOnline');
      if (mounted) {
        setState(() {
          _isOnline = isOnline;
        });
      }
    });
  }

  @override
  void dispose() {
    // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –ø—Ä–∏ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–∏ —ç–∫—Ä–∞–Ω–∞
    _statusSubscription?.cancel();
    _testOrderTimer?.cancel();
    _waitingTimer?.cancel();
    _mapController?.dispose();
    super.dispose();
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–¥–∏—Ç–µ–ª—è
  Future<void> _loadDriverData() async {
    try {
      final driver = await _supabaseService.getCurrentUser();
      setState(() {
        _currentDriver = driver;
      });
    } catch (e) {
      debugPrint('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤–æ–¥–∏—Ç–µ–ª—è: $e');
    } finally {
      setState(() {
        _isLoading = false;
      });
    }
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –≤–æ–¥–∏—Ç–µ–ª—è
  Future<void> _loadDriverStatus() async {
    try {
      final isOnline = await _supabaseService.getDriverOnlineStatus();
      if (mounted) {
        setState(() {
          _isOnline = isOnline;
        });
      }
    } catch (e) {
      debugPrint('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –≤–æ–¥–∏—Ç–µ–ª—è: $e');
    }
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤–æ–¥–∏—Ç–µ–ª—è
  Future<void> _loadDriverStatistics() async {
    try {
      if (_supabaseService.currentUserId == null) return;
      
      final response = await Supabase.instance.client
          .from('profiles')
          .select('today_earnings, today_trips, total_earnings, total_trips, rating, last_trip_date')
          .eq('id', _supabaseService.currentUserId!)
          .maybeSingle();
      
      if (response != null && mounted) {
        final today = DateTime.now();
        final todayStr = '${today.year}-${today.month.toString().padLeft(2, '0')}-${today.day.toString().padLeft(2, '0')}';
        final lastTripDate = response['last_trip_date'] as String?;
        
        setState(() {
          // –ï—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–µ–∑–¥–∫–∞ –±—ã–ª–∞ –Ω–µ —Å–µ–≥–æ–¥–Ω—è, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–Ω–µ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
          if (lastTripDate != todayStr) {
            _todayEarnings = 0.0;
            _todayTrips = 0;
          } else {
            _todayEarnings = (response['today_earnings'] as num?)?.toDouble() ?? 0.0;
            _todayTrips = (response['today_trips'] as int?) ?? 0;
          }
          
          _totalEarnings = (response['total_earnings'] as num?)?.toDouble() ?? 0.0;
          _totalTrips = (response['total_trips'] as int?) ?? 0;
          _driverRating = (response['rating'] as num?)?.toDouble() ?? 5.0;
        });
        
        debugPrint('üìä –ó–∞–≥—Ä—É–∂–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: $_todayTrips –ø–æ–µ–∑–¥–æ–∫, ${_todayEarnings}‚ÇΩ –∑–∞ —Å–µ–≥–æ–¥–Ω—è');
      }
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: $e');
    }
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
  Future<void> _initializeLocation() async {
    try {
      final hasPermission = await _locationService.requestPermission();
      if (hasPermission) {
        final location = await _locationService.getCurrentLocation();
        if (location != null && mounted) {
          setState(() {
            _currentLocation = Point(
              latitude: location.lat,
              longitude: location.long,
            );
          });
          
          // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥–æ—Ä–æ–¥ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
          // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥–æ—Ä–æ–¥ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º (–∑–∞–≥–ª—É—à–∫–∞)
          final city = '–ú–æ—Å–∫–≤–∞'; // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
          if (city != null && mounted) {
            setState(() {
              _selectedCity = city;
            });
          }
          
          // –ü–µ—Ä–µ–º–µ—â–∞–µ–º –∫–∞–º–µ—Ä—É –∫ —Ç–µ–∫—É—â–µ–º—É –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—é
          if (_mapController != null) {
            await _moveToCurrentLocation();
          }
        }
      }
    } catch (e) {
      debugPrint('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è: $e');
    }
  }
  
  // –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã –∫ —Ç–µ–∫—É—â–µ–º—É –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—é
  Future<void> _moveToCurrentLocation() async {
    if (_mapController != null && _currentLocation != null) {
      await _mapController!.moveCamera(
        CameraUpdate.newCameraPosition(
          CameraPosition(
            target: _currentLocation!,
            zoom: 15,
          ),
        ),
      );
      
      // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä –≤–æ–¥–∏—Ç–µ–ª—è
      _updateDriverMarker();
    }
  }
  
  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–∞ –≤–æ–¥–∏—Ç–µ–ª—è
  void _updateDriverMarker() {
    if (_currentLocation == null) return;
    
    _placemarks.removeWhere((marker) => marker.mapId.value == 'driver_location');
    
    _placemarks.add(
      PlacemarkMapObject(
        mapId: const MapObjectId('driver_location'),
        point: _currentLocation!,
        icon: PlacemarkIcon.single(
          PlacemarkIconStyle(
            image: BitmapDescriptor.fromAssetImage('assets/icons/car_marker.png'),
            scale: 0.5,
          ),
        ),
      ),
    );
    
    if (mounted) {
      setState(() {});
    }
  }
  
  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
  Future<void> _loadAvailableOrders() async {
    if (!_isOnline) return;
    
    try {
      // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –æ–Ω–ª–∞–π–Ω
      _testOrderTimer?.cancel();
      _testOrderTimer = Timer(const Duration(seconds: 3), () {
        if (mounted && _isOnline && _orderStatus == 'available') {
          _createTestOrder();
        }
      });
      
      if (mounted) {
        setState(() {
          _availableOrders = [];
        });
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞—Ä–∫–µ—Ä—ã –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ –∫–∞—Ä—Ç–µ
        _showOrderMarkers();
      }
    } catch (e) {
      debugPrint('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤: $e');
    }
  }
  
  // –ü–æ–∫–∞–∑ –º–∞—Ä–∫–µ—Ä–æ–≤ –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ –∫–∞—Ä—Ç–µ
  void _showOrderMarkers() {
    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –º–∞—Ä–∫–µ—Ä—ã –∑–∞–∫–∞–∑–æ–≤
    _placemarks.removeWhere((marker) => 
        marker.mapId.value.startsWith('order_'));
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –º–∞—Ä–∫–µ—Ä—ã
    for (final order in _availableOrders) {
      _placemarks.add(
        PlacemarkMapObject(
          mapId: MapObjectId('order_${order.id}'),
          point: Point(
            latitude: order.startLat,
            longitude: order.startLng,
          ),
          icon: PlacemarkIcon.single(
            PlacemarkIconStyle(
              image: BitmapDescriptor.fromAssetImage('assets/icons/pickup_marker.png'),
              scale: 0.4,
            ),
          ),
          onTap: (_, __) => _showOrderDetails(order),
        ),
      );
    }
    
    if (mounted) {
      setState(() {});
    }
  }
  
  // –ü–æ–∫–∞–∑ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞
  void _showOrderDetails(OrderModel order) {
    setState(() {
      _currentOrder = order;
      _orderStatus = 'assigned';
    });
    
    // –°—Ç—Ä–æ–∏–º –º–∞—Ä—à—Ä—É—Ç –¥–æ —Ç–æ—á–∫–∏ –ø–æ–¥–∞—á–∏
    _buildRouteToPickup(order);
  }
  
  // –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ –¥–æ —Ç–æ—á–∫–∏ –ø–æ–¥–∞—á–∏
  Future<void> _buildRouteToPickup(OrderModel order) async {
    if (_currentLocation == null) return;
    
    try {
      debugPrint('–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ –∫ –∫–ª–∏–µ–Ω—Ç—É...');
      
      final result = await YandexDriving.requestRoutes(
        points: [
          RequestPoint(
            point: _currentLocation!,
            requestPointType: RequestPointType.wayPoint,
          ),
          RequestPoint(
            point: Point(latitude: order.startLat, longitude: order.startLng),
            requestPointType: RequestPointType.wayPoint,
          ),
        ],
        drivingOptions: const DrivingOptions(),
      );
      
      final sessionResult = await result.result;
      final routes = sessionResult.routes;
      
      if (routes != null && routes.isNotEmpty && mounted) {
        final route = routes.first;
        final distance = route.metadata.weight.distance.value;
        final time = route.metadata.weight.time.value;
        
        setState(() {
          _routePolyline = PolylineMapObject(
            mapId: const MapObjectId('route_to_pickup'),
            polyline: Polyline(points: route.geometry),
            strokeColor: const Color(0xFFF654AA),
            strokeWidth: 4,
          );
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –¥–æ –ø—Ä–∏–±—ã—Ç–∏—è –∫ –∫–ª–∏–µ–Ω—Ç—É
          if (time != null) {
            _estimatedTimeToClient = Duration(seconds: time.toInt());
          }
        });
        
        debugPrint('–ú–∞—Ä—à—Ä—É—Ç –∫ –∫–ª–∏–µ–Ω—Ç—É –ø–æ—Å—Ç—Ä–æ–µ–Ω: ${(distance?.toDouble() ?? 0) / 1000} –∫–º, –≤—Ä–µ–º—è: ${time != null ? Duration(seconds: time.toInt()).inMinutes : 0} –º–∏–Ω');
      }
    } catch (e) {
      debugPrint('–û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞ –∫ –∫–ª–∏–µ–Ω—Ç—É: $e');
      // –ü—Ä–∏ –æ—à–∏–±–∫–µ —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –º–∞—Ä—à—Ä—É—Ç
      _createSimpleRoute(
        _currentLocation!,
        Point(latitude: order.startLat, longitude: order.startLng),
        'route_to_pickup',
        const Color(0xFFF654AA),
      );
    }
  }
  
  // –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –¥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
  Future<void> _buildRouteToDestination(OrderModel order) async {
    try {
      debugPrint('–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –¥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è...');
      
      final result = await YandexDriving.requestRoutes(
        points: [
          RequestPoint(
            point: Point(latitude: order.startLat, longitude: order.startLng),
            requestPointType: RequestPointType.wayPoint,
          ),
          RequestPoint(
            point: Point(latitude: order.endLat, longitude: order.endLng),
            requestPointType: RequestPointType.wayPoint,
          ),
        ],
        drivingOptions: const DrivingOptions(),
      );
      
      final sessionResult = await result.result;
      final routes = sessionResult.routes;
      
      if (routes != null && routes.isNotEmpty && mounted) {
        final route = routes.first;
        final distance = route.metadata.weight.distance.value;
        final time = route.metadata.weight.time.value;
        
        setState(() {
          _routePolyline = PolylineMapObject(
            mapId: const MapObjectId('route_to_destination'),
            polyline: Polyline(points: route.geometry),
            strokeColor: const Color(0xFFA5C572),
            strokeWidth: 4,
          );
          _isRouteToClient = false;
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –¥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
          if (time != null) {
            _estimatedTimeToDestination = Duration(seconds: time.toInt());
          }
        });
        
        debugPrint('–ú–∞—Ä—à—Ä—É—Ç –¥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø–æ—Å—Ç—Ä–æ–µ–Ω: ${(distance?.toDouble() ?? 0) / 1000} –∫–º, –≤—Ä–µ–º—è: ${time != null ? Duration(seconds: time.toInt()).inMinutes : 0} –º–∏–Ω');
      }
    } catch (e) {
      debugPrint('–û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞ –¥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è: $e');
      // –ü—Ä–∏ –æ—à–∏–±–∫–µ —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –º–∞—Ä—à—Ä—É—Ç
      _createSimpleRoute(
        Point(latitude: order.startLat, longitude: order.startLng),
        Point(latitude: order.endLat, longitude: order.endLng),
        'route_to_destination',
        const Color(0xFFA5C572),
      );
    }
  }
  
  // –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞ (–∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç)
  void _createSimpleRoute(Point start, Point end, String routeId, Color color) {
    if (mounted) {
      setState(() {
        _routePolyline = PolylineMapObject(
          mapId: MapObjectId(routeId),
          polyline: Polyline(points: [start, end]),
          strokeColor: color,
          strokeWidth: 4,
        );
      });
    }
  }
  
  // –ü—Ä–∏–Ω—è—Ç–∏–µ –∑–∞–∫–∞–∑–∞
  Future<void> _acceptOrder(OrderModel order) async {
    try {
      // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞–∫–∞–∑–∞
      final success = true;
      
      if (success && mounted) {
        setState(() {
          _currentOrder = order;
          _orderStatus = 'inProgress';
          _isRouteToClient = true; // –ù–∞—á–∏–Ω–∞–µ–º —Å –º–∞—Ä—à—Ä—É—Ç–∞ –∫ –∫–ª–∏–µ–Ω—Ç—É
        });
        
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            content: Text('–ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç! –ü–æ—Å—Ç—Ä–æ–µ–Ω –º–∞—Ä—à—Ä—É—Ç –∫ –∫–ª–∏–µ–Ω—Ç—É'),
            backgroundColor: Color(0xFFA5C572),
          ),
        );
        
        // –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç –¥–æ —Ç–æ—á–∫–∏ –ø–æ–¥–∞—á–∏
        _buildRouteToPickup(order);
      }
    } catch (e) {
      debugPrint('–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞–∫–∞–∑–∞: $e');
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–∞–∫–∞–∑–∞'),
          backgroundColor: Colors.red,
        ),
      );
    }
  }
  
  // –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
  Future<void> _declineOrder(OrderModel order) async {
    try {
      // –°–Ω–∏–∂–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –≤–æ–¥–∏—Ç–µ–ª—è –∑–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ
      // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞
      // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ –≤–æ–¥–∏—Ç–µ–ª—è
      
      setState(() {
        _currentOrder = null;
        _orderStatus = 'available';
        _routePolyline = null;
      });
      
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text('–ó–∞–∫–∞–∑ –æ—Ç–∫–ª–æ–Ω–µ–Ω. –†–µ–π—Ç–∏–Ω–≥ —Å–Ω–∏–∂–µ–Ω –Ω–∞ 0.1'),
          backgroundColor: Color(0xFFFDAD6),
        ),
      );
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤
      _loadAvailableOrders();
    } catch (e) {
      debugPrint('–û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞: $e');
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤–æ–¥–∏—Ç–µ–ª—è (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
  Future<void> _updateDriverStatusAsync(bool isOnline) async {
    setState(() {
      _isLoading = true;
    });

    try {
      // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      await Future.delayed(const Duration(milliseconds: 500));
      
      setState(() {
        _isOnline = isOnline;
      });
      
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text(isOnline ? '–í—ã –≤ —Å–µ—Ç–∏' : '–í—ã –Ω–µ –≤ —Å–µ—Ç–∏'),
          backgroundColor: isOnline ? const Color(0xFFA5C572) : Colors.grey,
        ),
      );
      
      if (isOnline) {
        _loadAvailableOrders();
      }
    } catch (e) {
      debugPrint('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –≤–æ–¥–∏—Ç–µ–ª—è: $e');
    } finally {
      setState(() {
        _isLoading = false;
      });
    }
  }


  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Stack(
        children: [
          // –Ø–Ω–¥–µ–∫—Å –∫–∞—Ä—Ç–∞
          YandexMap(
            onMapCreated: (YandexMapController controller) {
              _mapController = controller;
              setState(() {
                _isMapInitialized = true;
              });
              
              // –ü–µ—Ä–µ–º–µ—â–∞–µ–º—Å—è –∫ —Ç–µ–∫—É—â–µ–º—É –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—é
              if (_currentLocation != null) {
                _moveToCurrentLocation();
              }
            },
            mapObjects: [
              ..._placemarks,
              if (_routePolyline != null) _routePolyline!,
            ],
          ),

          // –í–µ—Ä—Ö–Ω—è—è –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å
          Positioned(
            top: 0,
            left: 0,
            right: 0,
            child: Container(
              height: 70,
              padding: const EdgeInsets.symmetric(horizontal: 16),
              decoration: BoxDecoration(
                color: AppColors.white,
                boxShadow: [
                  BoxShadow(
                    color: Colors.black.withOpacity(0.05),
                    blurRadius: 2,
                    offset: const Offset(0, 1),
                  ),
                ],
              ),
              child: SafeArea(
                child: Row(
                  children: [
                    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –æ–±–ª–∞—Å—Ç—å –Ω–∞–∂–∞—Ç–∏—è –¥–ª—è –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é
                    Material(
                      color: Colors.transparent,
                      child: InkWell(
                        borderRadius: BorderRadius.circular(30),
                        onTap: _toggleSidebar,
                        child: Container(
                          padding: const EdgeInsets.all(12),
                          child: const Icon(Icons.menu, size: 28),
                        ),
                      ),
                    ),
                    const Spacer(),
                    Text(
                      '–ú–∞–º–∞ —Ç–∞–∫—Å–∏',
                      style: TextStyle(
                        fontSize: 24,
                        color: AppColors.success,
                        fontFamily: 'Nunito',
                      ),
                    ),
                    const Spacer(),
                    // –ê–≤–∞—Ç–∞—Ä–∫–∞ –≤–æ–¥–∏—Ç–µ–ª—è —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω–æ–π –æ–±–ª–∞—Å—Ç—å—é –Ω–∞–∂–∞—Ç–∏—è
                    Material(
                      color: Colors.transparent,
                      child: InkWell(
                        borderRadius: BorderRadius.circular(30),
                        onTap: () {
                          // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–µ—Ö–æ–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å –≤–æ–¥–∏—Ç–µ–ª—è
                          _toggleSidebar();
                        },
                        child: Container(
                          padding: const EdgeInsets.all(4),
                          child: Container(
                            width: 40,
                            height: 40,
                            decoration: BoxDecoration(
                              borderRadius: BorderRadius.circular(9999),
                              color: Colors.grey[300],
                            ),
                            child: _currentDriver?.avatarUrl != null &&
                                    _currentDriver!.avatarUrl!.isNotEmpty
                                ? ClipRRect(
                                    borderRadius: BorderRadius.circular(20),
                                    child: Image.network(
                                      _currentDriver!.avatarUrl!,
                                      fit: BoxFit.cover,
                                      width: 40,
                                      height: 40,
                                      errorBuilder: (context, error, stackTrace) {
                                        return const Icon(
                                          Icons.person,
                                          size: 24,
                                          color: Colors.grey,
                                        );
                                      },
                                    ),
                                  )
                                : const Icon(
                                    Icons.person,
                                    size: 24,
                                    color: Colors.grey,
                                  ),
                          ),
                        ),
                      ),
                    ),
                  ],
                ),
              ),
            ),
          ),

          // –ö–Ω–æ–ø–∫–∞ "–æ–Ω–ª–∞–π–Ω/–æ—Ñ–ª–∞–π–Ω"
          Positioned(
            top: 80,
            right: 16,
            child: GestureDetector(
              onTap: () => _updateDriverStatus(!_isOnline),
              child: Container(
                padding:
                    const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
                decoration: BoxDecoration(
                  color: _isOnline ? AppColors.success : Colors.grey,
                  borderRadius: BorderRadius.circular(20),
                  boxShadow: [
                    BoxShadow(
                      color: Colors.black.withOpacity(0.1),
                      blurRadius: 4,
                      offset: const Offset(0, 2),
                    ),
                  ],
                ),
                child: Row(
                  children: [
                    Icon(Icons.circle, color: Colors.white, size: 12),
                    SizedBox(width: 8),
                    Text(
                      _isOnline ? '–û–Ω–ª–∞–π–Ω' : '–û—Ñ—Ñ–ª–∞–π–Ω',
                      style: TextStyle(
                        color: Colors.white,
                        fontWeight: FontWeight.w500,
                      ),
                    ),
                  ],
                ),
              ),
            ),
          ),

          // –ù–∏–∂–Ω–∏–π –±–∞—Ä —Å –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ–º
          DraggableScrollableSheet(
            initialChildSize: _initialSheetSize,
            minChildSize: _minSheetSize,
            maxChildSize: _maxSheetSize,
            controller: _bottomSheetController,
            builder: (context, scrollController) {
              return Container(
                decoration: const BoxDecoration(
                  color: Color(0xFFF9FAFB),
                  borderRadius: BorderRadius.only(
                    topLeft: Radius.circular(24),
                    topRight: Radius.circular(24),
                  ),
                ),
                child: SingleChildScrollView(
                  controller: scrollController,
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.center,
                    children: [
                      // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
                      Container(
                        margin: const EdgeInsets.only(top: 12),
                        width: 40,
                        height: 4,
                        decoration: BoxDecoration(
                          color: Colors.grey[400],
                          borderRadius: BorderRadius.circular(3),
                        ),
                      ),

                      // –°–µ–∫—Ü–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
                      if (_orderStatus == 'available')
                        _buildAvailableSection()
                      else if (_orderStatus == 'assigned')
                        _buildAssignedSection()
                      else if (_orderStatus == 'inProgress')
                        _buildInProgressSection()
                      else if (_orderStatus == 'waitingForClient')
                        _buildWaitingSection()
                      else
                        _buildCompletedSection(),

                      const SizedBox(height: 20),
                    ],
                  ),
                ),
              );
            },
          ),

          // –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å (–≤—ã–¥–≤–∏–≥–∞–µ—Ç—Å—è —Å–ª–µ–≤–∞)
          if (_isSidebarOpen)
            Positioned(
              top: 0,
              left: 0,
              bottom: 0,
              child: GestureDetector(
                onHorizontalDragUpdate: (details) {
                  if (details.delta.dx < -10) {
                    _toggleSidebar();
                  }
                },
                child: Row(
                  children: [
                    DriverSidebar(
                      driverName: _currentDriver?.fullName ?? "–ó–∞–≥—Ä—É–∑–∫–∞...",
                      driverRating: _driverRating.toStringAsFixed(1),
                      driverImageUrl: _currentDriver?.avatarUrl,
                      onClose: _toggleSidebar,
                      isOnline: _isOnline,
                      onStatusChange: _updateDriverStatus,
                    ),
                    // –ü–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω–∞—è –æ–±–ª–∞—Å—Ç—å –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏
                    GestureDetector(
                      onTap: _toggleSidebar,
                      child: Container(width: 50, color: Colors.transparent),
                    ),
                  ],
                ),
              ),
            ),
        ],
      ),
      floatingActionButton: _isOnline ? Column(
        mainAxisSize: MainAxisSize.min,
        children: [
          FloatingActionButton(
            onPressed: _createTestOrder,
            backgroundColor: const Color(0xFFFDAD6),
            heroTag: "test_order",
            child: const Icon(Icons.add_task),
            tooltip: '–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑',
          ),
          const SizedBox(height: 10),
          FloatingActionButton(
            onPressed: _changeOrderStatus,
            backgroundColor: AppColors.primary,
            heroTag: "change_status",
            child: const Icon(Icons.refresh),
            tooltip: '–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ (–¥–µ–º–æ)',
          ),
        ],
      ) : null,
    );
  }

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
  void _toggleSidebar() {
    setState(() {
      _isSidebarOpen = !_isSidebarOpen;
    });
  }

  // –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ (–¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏)
  void _changeOrderStatus() {
    setState(() {
      if (_orderStatus == 'available')
        _orderStatus = 'assigned';
      else if (_orderStatus == 'assigned')
        _orderStatus = 'inProgress';
      else if (_orderStatus == 'inProgress')
        _orderStatus = 'completed';
      else
        _orderStatus = 'available';
    });
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞
  void _createTestOrder() {
    final testOrder = OrderModel(
      id: 'test_order_${DateTime.now().millisecondsSinceEpoch}',
      clientId: 'test_client_001',
      driverId: null,
      startLat: 55.7558,
      startLng: 37.6176,
      endLat: 55.7522,
      endLng: 37.6156,
      startAddress: '–ö—Ä–∞—Å–Ω–∞—è –ø–ª–æ—â–∞–¥—å, 1',
      endAddress: '—É–ª. –¢–≤–µ—Ä—Å–∫–∞—è, 15',
      price: 450.0,
      status: OrderStatus.created,
      createdAt: DateTime.now(),
      clientName: '–ê–Ω–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞',
      clientPhone: '+7 (999) 123-45-67',
      clientRating: '4.9',
      childCount: 1,
      comment: '–ù—É–∂–Ω–æ –¥–µ—Ç—Å–∫–æ–µ –∞–≤—Ç–æ–∫—Ä–µ—Å–ª–æ –¥–ª—è —Ä–µ–±–µ–Ω–∫–∞ 5 –ª–µ—Ç',
    );
    
    setState(() {
      _currentOrder = testOrder;
      _orderStatus = 'assigned';
    });
    
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(
        content: Text('–ù–æ–≤—ã–π –∑–∞–∫–∞–∑! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–µ—Ç–∞–ª–∏ –≤ –Ω–∏–∂–Ω–µ–π –ø–∞–Ω–µ–ª–∏'),
        backgroundColor: Color(0xFFF654AA),
        duration: Duration(seconds: 4),
      ),
    );
  }
  
  // –ü—Ä–∏–Ω—è—Ç–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–∫–∞–∑–∞
  void _acceptCurrentOrder() {
    if (_currentOrder != null) {
      _acceptOrder(_currentOrder!);
    } else {
      _createTestOrder();
    }
  }

  // –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–∫–∞–∑–∞
  void _declineCurrentOrder() {
    if (_currentOrder != null) {
      _declineOrder(_currentOrder!);
    } else {
      setState(() {
        _orderStatus = 'available';
      });
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text('–ó–∞–∫–∞–∑ –æ—Ç–∫–ª–æ–Ω–µ–Ω'),
          backgroundColor: Colors.orange,
        ),
      );
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –æ–Ω–ª–∞–π–Ω
  Duration _getOnlineTime() {
    if (!_isOnline) return _todayOnlineTime;
    return _todayOnlineTime + DateTime.now().difference(_onlineStartTime);
  }

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  String _formatDuration(Duration duration) {
    final hours = duration.inHours;
    final minutes = duration.inMinutes % 60;
    if (hours > 0) {
      return '${hours}—á ${minutes}–º';
    } else {
      return '${minutes}–º';
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø–æ–µ–∑–¥–∫–∏
  void _updateStatsOnRideComplete() {
    setState(() {
      _todayTrips++;
      _totalTrips++;
      if (_currentOrder != null) {
        _todayEarnings += _currentOrder!.price;
        _totalEarnings += _currentOrder!.price;
        // –ü–æ–≤—ã—à–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –≤–æ–¥–∏—Ç–µ–ª—è (—Å–ª—É—á–∞–π–Ω–æ –æ—Ç 0.1 –¥–æ 0.3)
        final ratingIncrease = 0.1 + (DateTime.now().millisecond % 3) * 0.1;
        _driverRating = (_driverRating + ratingIncrease).clamp(0.0, 5.0);
      }
    });
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ–Ω–ª–∞–π–Ω
  void _updateOnlineStatus(bool isOnline) {
    if (isOnline && !_isOnline) {
      _onlineStartTime = DateTime.now();
    } else if (!isOnline && _isOnline) {
      _todayOnlineTime += DateTime.now().difference(_onlineStartTime);
    }
  }

  // –ü—Ä–∏–±—ã—Ç–∏–µ –∫ –∫–ª–∏–µ–Ω—Ç—É
  void _arrivedAtClient() {
    if (_currentOrder == null) return;
    
    setState(() {
      _orderStatus = 'waitingForClient';
      _waitingMinutes = 0;
      _waitingSeconds = 0;
      _waitingFee = 0.0;
    });
    
    // –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –¥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
    _buildRouteToDestination(_currentOrder!);
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º 5-–º–∏–Ω—É—Ç–Ω—ã–π —Ç–∞–π–º–µ—Ä
    _startWaitingTimer();
    
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(
        content: Text('–ü—Ä–∏–±—ã–ª –∫ –∫–ª–∏–µ–Ω—Ç—É! –û–∂–∏–¥–∞–Ω–∏–µ 5 –º–∏–Ω—É—Ç'),
        backgroundColor: Colors.blue,
        duration: Duration(seconds: 3),
      ),
    );
  }
  
  // –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞ –æ–∂–∏–¥–∞–Ω–∏—è
  void _startWaitingTimer() {
    _waitingTimer?.cancel();
    _waitingTimer = Timer.periodic(const Duration(seconds: 1), (timer) {
      setState(() {
        _waitingSeconds++;
        if (_waitingSeconds >= 60) {
          _waitingSeconds = 0;
          _waitingMinutes++;
          
          // –ü–æ—Å–ª–µ 5 –º–∏–Ω—É—Ç –Ω–∞—á–∏–Ω–∞–µ–º –Ω–∞—á–∏—Å–ª—è—Ç—å –¥–æ–ø–ª–∞—Ç—É
          if (_waitingMinutes > 5) {
            _waitingFee += 10.0;
          }
        }
      });
    });
  }
  
  // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∞–π–º–µ—Ä–∞ –æ–∂–∏–¥–∞–Ω–∏—è
  void _stopWaitingTimer() {
    _waitingTimer?.cancel();
  }
  
  // –ö–ª–∏–µ–Ω—Ç —Å–µ–ª –≤ –º–∞—à–∏–Ω—É
  void _clientBoarded() {
    _stopWaitingTimer();
    
    setState(() {
      _orderStatus = 'inProgress';
      _isRouteToClient = false;
    });
    
    final totalPrice = (_currentOrder?.price ?? 0) + _waitingFee;
    
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('–ö–ª–∏–µ–Ω—Ç —Å–µ–ª! –ü–æ–µ–∑–¥–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å. –°—Ç–æ–∏–º–æ—Å—Ç—å: ${totalPrice.toStringAsFixed(0)}‚ÇΩ'),
        backgroundColor: Colors.green,
        duration: Duration(seconds: 3),
      ),
    );
  }
  
  // –ö–ª–∏–µ–Ω—Ç –Ω–µ –ø—Ä–∏—à–µ–ª
  void _clientNoShow() {
    _stopWaitingTimer();
    
    setState(() {
      _orderStatus = 'completed';
      _currentOrder = null;
      _routePolyline = null;
      _waitingMinutes = 0;
      _waitingSeconds = 0;
      _waitingFee = 0.0;
    });
    
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(
        content: Text('–ö–ª–∏–µ–Ω—Ç –Ω–µ –ø—Ä–∏—à–µ–ª. –†–µ–π—Ç–∏–Ω–≥ –Ω–µ —Å–Ω–∏–∂–µ–Ω'),
        backgroundColor: Colors.orange,
        duration: Duration(seconds: 3),
      ),
    );
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø–æ–∏—Å–∫—É –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤
    Timer(const Duration(seconds: 3), () {
      if (mounted) {
        setState(() {
          _orderStatus = 'available';
        });
      }
    });
  }
  
  // –ü–æ–¥–æ–∂–¥–∞—Ç—å –µ—â–µ
  void _waitMore() {
    // –ü—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ, —Ç–∞–π–º–µ—Ä —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(
        content: Text('–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ... +10‚ÇΩ –∑–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É'),
        backgroundColor: Colors.blue,
        duration: Duration(seconds: 2),
      ),
    );
  }
  
  // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–æ–µ–∑–¥–∫–∏
  void _completeTrip() async {
    if (_currentOrder == null) return;
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –∑–∞–∫–∞–∑–∞ –≤–º–µ—Å—Ç–æ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—É–º–º—ã
    final baseAmount = _currentOrder!.price; // –¶–µ–Ω–∞ –∏–∑ –∑–∞–∫–∞–∑–∞
    final totalAmount = baseAmount + _waitingFee;
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    try {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ Supabase
      final success = await _saveDriverStatistics(
        earnings: totalAmount,
        trips: 1,
      );
      
      if (success) {
        debugPrint('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–æ–¥–∏—Ç–µ–ª—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: +${totalAmount}‚ÇΩ, +1 –ø–æ–µ–∑–¥–∫–∞');
      } else {
        debugPrint('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤–æ–¥–∏—Ç–µ–ª—è');
      }

      // –ù–∞—á–∏—Å–ª—è–µ–º –±–∞–ª–ª—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ –∑–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é –ø–æ–µ–∑–¥–∫—É
      final pointsAdded = await _supabaseService.addLoyaltyPoints(
        points: 15,
        description: '–ó–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è –ø–æ–µ–∑–¥–∫–∞',
      );
      
      if (pointsAdded) {
        debugPrint('–ù–∞—á–∏—Å–ª–µ–Ω–æ 15 –±–∞–ª–ª–æ–≤ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ –∑–∞ –ø–æ–µ–∑–¥–∫—É');
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π
      await _supabaseService.updateOrderStatus(
        orderId: _currentOrder!.id,
        status: 'completed',
      );
    } catch (e) {
      debugPrint('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: $e');
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    _todayTrips++;
    _todayEarnings += totalAmount;
    _driverRating = (_driverRating + 4.8) / 2; // –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥
    
    setState(() {
      _orderStatus = 'completed';
      _currentOrder = null;
      _routePolyline = null;
      // –£–±–∏—Ä–∞–µ–º –º–∞—Ä–∫–µ—Ä—ã (–µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å)
      _placemarks.removeWhere((placemark) => 
          placemark.mapId.value == 'pickup' || 
          placemark.mapId.value == 'destination');
    });
    
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('–ü–æ–µ–∑–¥–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! +${totalAmount.toStringAsFixed(0)}‚ÇΩ | +15 –±–∞–ª–ª–æ–≤ | –†–µ–π—Ç–∏–Ω–≥: ${_driverRating.toStringAsFixed(1)}‚≠ê'),
        backgroundColor: Colors.green,
        duration: Duration(seconds: 5),
      ),
    );
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø–æ–∏—Å–∫—É –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    Timer(const Duration(seconds: 5), () {
      if (mounted) {
        setState(() {
          _orderStatus = 'available';
        });
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
        Timer(const Duration(seconds: 10), () {
          if (mounted && _orderStatus == 'available') {
            _createTestOrder();
          }
        });
      }
    });
  }

  // –î–∏–∞–ª–æ–≥ —Å–≤—è–∑–∏ —Å –∫–ª–∏–µ–Ω—Ç–æ–º
  void _showContactDialog() {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: const Text('–°–≤—è–∑–∞—Ç—å—Å—è —Å –∫–ª–∏–µ–Ω—Ç–æ–º'),
          content: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              ListTile(
                leading: const Icon(Icons.phone),
                title: const Text('–ü–æ–∑–≤–æ–Ω–∏—Ç—å'),
                subtitle: Text(_currentOrder?.clientPhone ?? '+7 XXX XXX XX XX'),
                onTap: () {
                  Navigator.of(context).pop();
                  ScaffoldMessenger.of(context).showSnackBar(
                    const SnackBar(content: Text('–ó–≤–æ–Ω–æ–∫ –∫–ª–∏–µ–Ω—Ç—É...')),
                  );
                },
              ),
              ListTile(
                leading: const Icon(Icons.message),
                title: const Text('–ù–∞–ø–∏—Å–∞—Ç—å'),
                subtitle: const Text('–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ'),
                onTap: () {
                  Navigator.of(context).pop();
                  ScaffoldMessenger.of(context).showSnackBar(
                    const SnackBar(content: Text('–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ')),
                  );
                },
              ),
            ],
          ),
          actions: [
            TextButton(
              onPressed: () => Navigator.of(context).pop(),
              child: const Text('–ó–∞–∫—Ä—ã—Ç—å'),
            ),
          ],
        );
      },
    );
  }

  // –†–∞—Å—á–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –ø–æ–µ–∑–¥–∫–∏ (–∑–∞–≥–ª—É—à–∫–∞)
  String _calculateDistanceString() {
    if (_currentOrder == null) return '0';
    // –ü—Ä–æ—Å—Ç–∞—è –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
    final lat1 = _currentOrder!.startLat;
    final lng1 = _currentOrder!.startLng;
    final lat2 = _currentOrder!.endLat;
    final lng2 = _currentOrder!.endLng;
    
    // –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
    final distance = _calculateDistance(lat1, lng1, lat2, lng2);
    return distance.toStringAsFixed(1);
  }
  
  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –∏ –≤—Ä–µ–º–µ–Ω–∏
  double _calculateDistance(double lat1, double lng1, double lat2, double lng2) {
    // –ü—Ä–æ—Å—Ç–∞—è –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
    return 5.2; // –∫–º
  }
  
  int _calculateDuration(double lat1, double lng1, double lat2, double lng2) {
    // –ü—Ä–æ—Å—Ç–∞—è –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏
    return 15; // –º–∏–Ω—É—Ç
  }

  // –†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–µ–∑–¥–∫–∏ (–∑–∞–≥–ª—É—à–∫–∞)
  String _calculateDurationString() {
    if (_currentOrder == null) return '0';
    // –ü—Ä–æ—Å—Ç–∞—è –∑–∞–≥–ª—É—à–∫–∞ - –ø—Ä–∏–º–µ—Ä–Ω–æ 3 –∫–º/–º–∏–Ω
    final distance = double.tryParse(_calculateDistanceString()) ?? 0;
    final duration = (distance * 3).round();
    return duration.toString();
  }
  
  
  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤–æ–¥–∏—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
  Future<bool> _saveDriverStatistics({
    required double earnings,
    required int trips,
  }) async {
    try {
      if (_supabaseService.currentUserId == null) {
        debugPrint('‚ùå –ù–µ—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
        return false;
      }
      
      final today = DateTime.now();
      final todayStr = '${today.year}-${today.month.toString().padLeft(2, '0')}-${today.day.toString().padLeft(2, '0')}';
      
      debugPrint('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: +${earnings}‚ÇΩ, +${trips} –ø–æ–µ–∑–¥–æ–∫ –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª—è ${_supabaseService.currentUserId} –Ω–∞ –¥–∞—Ç—É $todayStr');
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ç–∞–±–ª–∏—Ü—É profiles –≤–º–µ—Å—Ç–æ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
      final currentProfile = await Supabase.instance.client
          .from('profiles')
          .select('today_earnings, today_trips, total_earnings, total_trips')
          .eq('id', _supabaseService.currentUserId!)
          .maybeSingle();
      
      if (currentProfile != null) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å
        final newTodayEarnings = (currentProfile['today_earnings'] ?? 0.0) + earnings;
        final newTodayTrips = (currentProfile['today_trips'] ?? 0) + trips;
        final newTotalEarnings = (currentProfile['total_earnings'] ?? 0.0) + earnings;
        final newTotalTrips = (currentProfile['total_trips'] ?? 0) + trips;
        
        await Supabase.instance.client
            .from('profiles')
            .update({
              'today_earnings': newTodayEarnings,
              'today_trips': newTodayTrips,
              'total_earnings': newTotalEarnings,
              'total_trips': newTotalTrips,
              'last_trip_date': todayStr,
            })
            .eq('id', _supabaseService.currentUserId!);
            
        debugPrint('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: $newTodayTrips –ø–æ–µ–∑–¥–æ–∫, ${newTodayEarnings}‚ÇΩ –∑–∞ —Å–µ–≥–æ–¥–Ω—è');
      } else {
        debugPrint('‚ùå –ü—Ä–æ—Ñ–∏–ª—å –≤–æ–¥–∏—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return false;
      }
      
      return true;
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: $e');
      return false;
    }
  }
  
  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤–æ–¥–∏—Ç–µ–ª—è
  void _updateDriverStatus(bool isOnline) {
    _updateOnlineStatus(isOnline);
    
    setState(() {
      _isOnline = isOnline;
    });
    
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(isOnline ? '–í—ã –≤ —Å–µ—Ç–∏' : '–í—ã –Ω–µ –≤ —Å–µ—Ç–∏'),
        backgroundColor: isOnline ? Colors.green : Colors.grey,
      ),
    );
    
    if (isOnline) {
      _loadAvailableOrders();
    } else {
      // –û—á–∏—â–∞–µ–º –∑–∞–∫–∞–∑—ã –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –≤ –æ—Ñ—Ñ–ª–∞–π–Ω
      setState(() {
        _availableOrders.clear();
        _currentOrder = null;
        _orderStatus = 'available';
      });
    }
  }
  

  // –°–µ–∫—Ü–∏—è –∫–æ–≥–¥–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
  Widget _buildAvailableSection() {
    return Container(
      margin: const EdgeInsets.all(24),
      child: Column(
        children: [
          Container(
            width: double.infinity,
            padding: const EdgeInsets.all(16),
            decoration: BoxDecoration(
              color: AppColors.white,
              borderRadius: BorderRadius.circular(12),
              boxShadow: [
                BoxShadow(
                  color: Colors.black.withOpacity(0.05),
                  blurRadius: 2,
                  offset: const Offset(0, 1),
                ),
              ],
            ),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                const Text(
                  '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤',
                  style: TextStyle(
                    fontSize: 18,
                    fontWeight: FontWeight.w500,
                    fontFamily: 'Rubik',
                  ),
                ),
                const SizedBox(height: 12),
                Text(
                  '–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤',
                  style: TextStyle(
                    fontSize: 16,
                    color: AppColors.textSecondary,
                    fontFamily: 'Rubik',
                  ),
                ),
              ],
            ),
          ),
          const SizedBox(height: 16),
          Container(
            width: double.infinity,
            padding: const EdgeInsets.all(16),
            decoration: BoxDecoration(
              color: AppColors.white,
              borderRadius: BorderRadius.circular(12),
              boxShadow: [
                BoxShadow(
                  color: Colors.black.withOpacity(0.05),
                  blurRadius: 2,
                  offset: const Offset(0, 1),
                ),
              ],
            ),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                const Text(
                  '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è',
                  style: TextStyle(
                    fontSize: 18,
                    fontWeight: FontWeight.w500,
                    fontFamily: 'Rubik',
                  ),
                ),
                const SizedBox(height: 16),
                Row(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: [
                    _buildStatItem('–ü–æ–µ–∑–¥–æ–∫', _todayTrips.toString()),
                    _buildStatItem('–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ', '${_todayEarnings.toStringAsFixed(0)}‚ÇΩ'),
                    _buildStatItem('–û–Ω–ª–∞–π–Ω', _formatDuration(_getOnlineTime())),
                  ],
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  // –°–µ–∫—Ü–∏—è —Å –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–º –∑–∞–∫–∞–∑–æ–º
  Widget _buildAssignedSection() {
    return Container(
      margin: const EdgeInsets.all(24),
      child: Column(
        children: [
          Container(
            width: double.infinity,
            padding: const EdgeInsets.all(16),
            decoration: BoxDecoration(
              color: AppColors.white,
              borderRadius: BorderRadius.circular(12),
              boxShadow: [
                BoxShadow(
                  color: Colors.black.withOpacity(0.05),
                  blurRadius: 2,
                  offset: const Offset(0, 1),
                ),
              ],
            ),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                const Text(
                  '–ù–æ–≤—ã–π –∑–∞–∫–∞–∑',
                  style: TextStyle(
                    fontSize: 18,
                    fontWeight: FontWeight.w500,
                    fontFamily: 'Rubik',
                  ),
                ),
                const SizedBox(height: 16),
                Row(
                  children: [
                    const CircleAvatar(
                      radius: 24,
                      backgroundColor: Color(0xFFF3F4F6),
                      child: Icon(Icons.person, color: Color(0xFF9CA3AF)),
                    ),
                    const SizedBox(width: 12),
                    Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text(
                          _currentOrder?.clientName ?? '–ö–ª–∏–µ–Ω—Ç',
                          style: const TextStyle(
                            fontSize: 16,
                            fontWeight: FontWeight.w500,
                            fontFamily: 'Rubik',
                          ),
                        ),
                        const SizedBox(height: 4),
                        Row(
                          children: [
                            const Icon(
                              Icons.star,
                              size: 16,
                              color: Color(0xFFF59E0B),
                            ),
                            const SizedBox(width: 4),
                            Text(
                              _currentOrder?.clientRating ?? '4.8',
                              style: TextStyle(
                                fontSize: 14,
                                color: AppColors.textSecondary,
                                fontFamily: 'Rubik',
                              ),
                            ),
                          ],
                        ),
                      ],
                    ),
                    const Spacer(),
                    Text(
                      '${_currentOrder?.price.toStringAsFixed(0) ?? '0'}‚ÇΩ',
                      style: const TextStyle(
                        fontSize: 18,
                        fontWeight: FontWeight.w500,
                        fontFamily: 'Rubik',
                      ),
                    ),
                  ],
                ),
                const SizedBox(height: 16),
                const Divider(height: 1, color: Color(0xFFE5E7EB)),
                const SizedBox(height: 16),
                _buildAddressRow(
                  '–û—Ç–∫—É–¥–∞',
                  _currentOrder?.startAddress ?? '–ê–¥—Ä–µ—Å –∑–∞–≥—Ä—É–∑–∫–∏...',
                  Icons.circle_outlined,
                ),
                Container(
                  margin: const EdgeInsets.only(left: 12),
                  width: 1,
                  height: 16,
                  color: AppColors.link,
                ),
                _buildAddressRow(
                  '–ö—É–¥–∞',
                  _currentOrder?.endAddress ?? '–ê–¥—Ä–µ—Å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è...',
                  Icons.location_on_outlined,
                ),
                const SizedBox(height: 16),
                const Divider(height: 1, color: Color(0xFFE5E7EB)),
                const SizedBox(height: 16),
                if (_currentOrder?.childCount != null && _currentOrder!.childCount! > 0)
                  _buildInfoRow(
                    '–î–µ—Ç–µ–π',
                    '${_currentOrder!.childCount}',
                  ),
                const SizedBox(height: 8),
                if (_currentOrder?.comment != null && _currentOrder!.comment!.isNotEmpty)
                  _buildInfoRow(
                    '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π',
                    _currentOrder!.comment!,
                  ),
                const SizedBox(height: 16),
                Row(
                  children: [
                    Expanded(
                      child: ElevatedButton(
                        onPressed: _declineCurrentOrder,
                        style: ElevatedButton.styleFrom(
                          backgroundColor: Colors.white,
                          foregroundColor: AppColors.text,
                          side: BorderSide(color: AppColors.border),
                          padding: const EdgeInsets.symmetric(vertical: 12),
                          shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(8),
                          ),
                        ),
                        child: const Text('–û—Ç–∫–ª–æ–Ω–∏—Ç—å'),
                      ),
                    ),
                    const SizedBox(width: 12),
                    Expanded(
                      child: ElevatedButton(
                        onPressed: _acceptCurrentOrder,
                        style: ElevatedButton.styleFrom(
                          backgroundColor: AppColors.primary,
                          foregroundColor: Colors.white,
                          padding: const EdgeInsets.symmetric(vertical: 12),
                          shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(8),
                          ),
                        ),
                        child: const Text('–ü—Ä–∏–Ω—è—Ç—å'),
                      ),
                    ),
                  ],
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  // –°–µ–∫—Ü–∏—è —Å –∑–∞–∫–∞–∑–æ–º –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ
  Widget _buildInProgressSection() {
    if (_currentOrder == null) return const SizedBox.shrink();

    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.blue.shade50,
        borderRadius: BorderRadius.circular(12),
        border: Border.all(color: Colors.blue.shade200),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Icon(Icons.directions_car, color: Colors.blue.shade700),
              const SizedBox(width: 8),
              Expanded(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      _isRouteToClient ? '–ï–¥—É –∫ –∫–ª–∏–µ–Ω—Ç—É' : '–ü–æ–µ–∑–¥–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ',
                      style: TextStyle(
                        fontSize: 18,
                        fontWeight: FontWeight.bold,
                        color: Colors.blue.shade700,
                      ),
                    ),
                    if (_isRouteToClient && _estimatedTimeToClient != null)
                      Text(
                        '–ü—Ä–∏–±—ã—Ç–∏–µ —á–µ—Ä–µ–∑ ${_formatDuration(_estimatedTimeToClient!)}',
                        style: TextStyle(
                          fontSize: 14,
                          color: Colors.blue.shade600,
                          fontWeight: FontWeight.w500,
                        ),
                      ),
                    if (!_isRouteToClient && _estimatedTimeToDestination != null)
                      Text(
                        '–î–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è ${_formatDuration(_estimatedTimeToDestination!)}',
                        style: TextStyle(
                          fontSize: 14,
                          color: Colors.green.shade600,
                          fontWeight: FontWeight.w500,
                        ),
                      ),
                  ],
                ),
              ),
            ],
          ),
          const SizedBox(height: 12),
          
          // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ
          Row(
            children: [
              const Icon(Icons.person, size: 20, color: Colors.grey),
              const SizedBox(width: 8),
              Text(
                _currentOrder?.clientName ?? '–ö–ª–∏–µ–Ω—Ç',
                style: const TextStyle(fontSize: 16, fontWeight: FontWeight.w500),
              ),
            ],
          ),
          const SizedBox(height: 8),
          
          // –ú–∞—Ä—à—Ä—É—Ç
          Row(
            children: [
              const Icon(Icons.location_on, size: 20, color: Colors.green),
              const SizedBox(width: 8),
              Expanded(
                child: Text(
                  '–û—Ç: ${_currentOrder?.startAddress ?? '–ê–¥—Ä–µ—Å –ø–æ–¥–∞—á–∏'}',
                  style: const TextStyle(fontSize: 14),
                ),
              ),
            ],
          ),
          const SizedBox(height: 4),
          Row(
            children: [
              const Icon(Icons.flag, size: 20, color: Colors.red),
              const SizedBox(width: 8),
              Expanded(
                child: Text(
                  '–î–æ: ${_currentOrder?.endAddress ?? '–ê–¥—Ä–µ—Å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è'}',
                  style: const TextStyle(fontSize: 14),
                ),
              ),
            ],
          ),
          const SizedBox(height: 16),
          
          // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–µ–∑–¥–∫–µ
          Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: [
              Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  const Text('–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ', style: TextStyle(color: Colors.grey)),
                  Text(
                    '${_calculateDistanceString()} –∫–º',
                    style: const TextStyle(fontWeight: FontWeight.bold),
                  ),
                ],
              ),
              Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  const Text('–í—Ä–µ–º—è', style: TextStyle(color: Colors.grey)),
                  Text(
                    '${_calculateDurationString()} –º–∏–Ω',
                    style: const TextStyle(fontWeight: FontWeight.bold),
                  ),
                ],
              ),
              Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  const Text('–°—Ç–æ–∏–º–æ—Å—Ç—å', style: TextStyle(color: Colors.grey)),
                  Text(
                    '${_currentOrder?.price.toStringAsFixed(0) ?? '0'}‚ÇΩ',
                    style: const TextStyle(fontWeight: FontWeight.bold, color: Colors.green),
                  ),
                ],
              ),
            ],
          ),
          const SizedBox(height: 16),
          
          // –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
          Row(
            children: [
              Expanded(
                child: ElevatedButton.icon(
                  onPressed: () => _showContactDialog(),
                  icon: const Icon(Icons.phone),
                  label: const Text('–°–≤—è–∑–∞—Ç—å—Å—è'),
                  style: ElevatedButton.styleFrom(
                    backgroundColor: Colors.blue.shade100,
                    foregroundColor: Colors.blue.shade700,
                  ),
                ),
              ),
              const SizedBox(width: 12),
              if (_isRouteToClient)
                Expanded(
                  child: ElevatedButton.icon(
                    onPressed: _arrivedAtClient,
                    icon: const Icon(Icons.location_on),
                    label: const Text('–ü—Ä–∏–±—ã–ª'),
                    style: ElevatedButton.styleFrom(
                      backgroundColor: const Color(0xFFFDAD6),
                      foregroundColor: Colors.white,
                    ),
                  ),
                )
              else
                Expanded(
                  child: ElevatedButton.icon(
                    onPressed: _completeTrip,
                    icon: const Icon(Icons.check),
                    label: const Text('–ó–∞–≤–µ—Ä—à–∏—Ç—å'),
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.green,
                      foregroundColor: Colors.white,
                    ),
                  ),
                ),
            ],
          ),
        ],
      ),
    );
  }

  // –°–µ–∫—Ü–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞
  Widget _buildWaitingSection() {
    if (_currentOrder == null) return const SizedBox.shrink();

    final isOvertime = _waitingMinutes > 5;
    final displayMinutes = _waitingMinutes;
    final displaySeconds = _waitingSeconds;

    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: isOvertime ? Colors.orange.shade50 : Colors.yellow.shade50,
        borderRadius: BorderRadius.circular(12),
        border: Border.all(
          color: isOvertime ? Colors.orange.shade200 : Colors.yellow.shade200,
        ),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Icon(
                Icons.access_time,
                color: isOvertime ? Colors.orange.shade700 : Colors.yellow.shade700,
              ),
              const SizedBox(width: 8),
              Text(
                '–û–∂–∏–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞',
                style: TextStyle(
                  fontSize: 18,
                  fontWeight: FontWeight.bold,
                  color: isOvertime ? Colors.orange.shade700 : Colors.yellow.shade700,
                ),
              ),
            ],
          ),
          const SizedBox(height: 12),
          
          // –¢–∞–π–º–µ—Ä
          Container(
            padding: const EdgeInsets.all(12),
            decoration: BoxDecoration(
              color: isOvertime ? Colors.orange.shade100 : Colors.yellow.shade100,
              borderRadius: BorderRadius.circular(8),
            ),
            child: Row(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                Icon(
                  Icons.timer,
                  size: 32,
                  color: isOvertime ? Colors.orange.shade700 : Colors.yellow.shade700,
                ),
                const SizedBox(width: 12),
                Text(
                  '${displayMinutes.toString().padLeft(2, '0')}:${displaySeconds.toString().padLeft(2, '0')}',
                  style: TextStyle(
                    fontSize: 28,
                    fontWeight: FontWeight.bold,
                    color: isOvertime ? Colors.orange.shade700 : Colors.yellow.shade700,
                  ),
                ),
              ],
            ),
          ),
          
          if (isOvertime) ...[
            const SizedBox(height: 12),
            Container(
              padding: const EdgeInsets.all(8),
              decoration: BoxDecoration(
                color: Colors.red.shade50,
                borderRadius: BorderRadius.circular(6),
                border: Border.all(color: Colors.red.shade200),
              ),
              child: Row(
                children: [
                  Icon(Icons.attach_money, color: Colors.red.shade700, size: 20),
                  const SizedBox(width: 8),
                  Text(
                    '–î–æ–ø–ª–∞—Ç–∞: +${_waitingFee.toStringAsFixed(0)}‚ÇΩ',
                    style: TextStyle(
                      fontWeight: FontWeight.bold,
                      color: Colors.red.shade700,
                    ),
                  ),
                ],
              ),
            ),
          ],
          
          const SizedBox(height: 16),
          
          // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ
          Row(
            children: [
              const Icon(Icons.person, size: 20, color: Colors.grey),
              const SizedBox(width: 8),
              Text(
                _currentOrder?.clientName ?? '–ö–ª–∏–µ–Ω—Ç',
                style: const TextStyle(fontSize: 16, fontWeight: FontWeight.w500),
              ),
            ],
          ),
          const SizedBox(height: 8),
          
          Row(
            children: [
              const Icon(Icons.location_on, size: 20, color: Colors.green),
              const SizedBox(width: 8),
              Expanded(
                child: Text(
                  _currentOrder?.startAddress ?? '–ê–¥—Ä–µ—Å –ø–æ–¥–∞—á–∏',
                  style: const TextStyle(fontSize: 14),
                ),
              ),
            ],
          ),
          
          const SizedBox(height: 16),
          
          // –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
          Row(
            children: [
              Expanded(
                child: ElevatedButton.icon(
                  onPressed: _clientBoarded,
                  icon: const Icon(Icons.directions_car),
                  label: const Text('–ö–ª–∏–µ–Ω—Ç —Å–µ–ª'),
                  style: ElevatedButton.styleFrom(
                    backgroundColor: Colors.green,
                    foregroundColor: Colors.white,
                  ),
                ),
              ),
            ],
          ),
          
          const SizedBox(height: 8),
          
          Row(
            children: [
              Expanded(
                child: ElevatedButton.icon(
                  onPressed: _waitMore,
                  icon: const Icon(Icons.schedule),
                  label: const Text('–ü–æ–¥–æ–∂–¥–∞—Ç—å'),
                  style: ElevatedButton.styleFrom(
                    backgroundColor: Colors.blue.shade100,
                    foregroundColor: Colors.blue.shade700,
                  ),
                ),
              ),
              const SizedBox(width: 8),
              Expanded(
                child: ElevatedButton.icon(
                  onPressed: _clientNoShow,
                  icon: const Icon(Icons.cancel),
                  label: const Text('–ù–µ –ø—Ä–∏—à–µ–ª'),
                  style: ElevatedButton.styleFrom(
                    backgroundColor: Colors.orange.shade100,
                    foregroundColor: Colors.orange.shade700,
                  ),
                ),
              ),
            ],
          ),
        ],
      ),
    );
  }
  
  // –°–µ–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
  Widget _buildCompletedSection() {
    return Container(
      margin: const EdgeInsets.all(24),
      child: Column(
        children: [
          Container(
            width: double.infinity,
            padding: const EdgeInsets.all(16),
            decoration: BoxDecoration(
              color: AppColors.white,
              borderRadius: BorderRadius.circular(12),
              boxShadow: [
                BoxShadow(
                  color: Colors.black.withOpacity(0.05),
                  blurRadius: 2,
                  offset: const Offset(0, 1),
                ),
              ],
            ),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                const Text(
                  '–ü–æ–µ–∑–¥–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞',
                  style: TextStyle(
                    fontSize: 18,
                    fontWeight: FontWeight.w500,
                    fontFamily: 'Rubik',
                    color: Color(0xFF059669),
                  ),
                ),
                const SizedBox(height: 16),
                Row(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: [
                    _buildResultItem('–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ', '${_currentOrder?.price.toStringAsFixed(0) ?? '0'}‚ÇΩ'),
                    _buildResultItem('–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ', '${_calculateDistanceString()} –∫–º'),
                    _buildResultItem('–í—Ä–µ–º—è', '${_calculateDurationString()} –º–∏–Ω'),
                  ],
                ),
                const SizedBox(height: 16),
                const Divider(height: 1, color: Color(0xFFE5E7EB)),
                const SizedBox(height: 16),
                const Text(
                  '–û—Ü–µ–Ω–∏—Ç–µ –ø–æ–µ–∑–¥–∫—É',
                  style: TextStyle(
                    fontSize: 16,
                    fontWeight: FontWeight.w500,
                    fontFamily: 'Rubik',
                  ),
                ),
                const SizedBox(height: 8),
                Row(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: List.generate(5, (index) {
                    return Icon(
                      Icons.star,
                      size: 32,
                      color: index < 4
                          ? const Color(0xFFF59E0B)
                          : Colors.grey[300],
                    );
                  }),
                ),
                const SizedBox(height: 16),
                SizedBox(
                  width: double.infinity,
                  child: ElevatedButton(
                    onPressed: () {
                      // –ü–µ—Ä–µ–π—Ç–∏ –∫ –Ω–æ–≤—ã–º –∑–∞–∫–∞–∑–∞–º
                      setState(() {
                        _orderStatus = 'available';
                      });
                    },
                    style: ElevatedButton.styleFrom(
                      backgroundColor: AppColors.primary,
                      foregroundColor: Colors.white,
                      padding: const EdgeInsets.symmetric(vertical: 12),
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(8),
                      ),
                    ),
                    child: const Text('–ì–æ—Ç–æ–≤ –∫ –Ω–æ–≤—ã–º –∑–∞–∫–∞–∑–∞–º'),
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –≤–∏–¥–∂–µ—Ç—ã
  Widget _buildStatItem(String title, String value) {
    return Column(
      children: [
        Text(
          title,
          style: TextStyle(
            fontSize: 14,
            color: AppColors.textSecondary,
            fontFamily: 'Rubik',
          ),
        ),
        const SizedBox(height: 4),
        Text(
          value,
          style: const TextStyle(
            fontSize: 18,
            fontWeight: FontWeight.w500,
            fontFamily: 'Rubik',
          ),
        ),
      ],
    );
  }

  Widget _buildAddressRow(String title, String address, IconData icon) {
    return Row(
      children: [
        Icon(icon, size: 12),
        const SizedBox(width: 12),
        Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              title,
              style: TextStyle(
                fontSize: 12,
                color: AppColors.textSecondary,
                fontFamily: 'Rubik',
              ),
            ),
            const SizedBox(height: 2),
            Text(
              address,
              style: const TextStyle(fontSize: 14, fontFamily: 'Rubik'),
            ),
          ],
        ),
      ],
    );
  }

  Widget _buildInfoRow(String title, String value) {
    return Row(
      children: [
        SizedBox(
          width: 100,
          child: Text(
            title,
            style: TextStyle(
              fontSize: 14,
              color: AppColors.textSecondary,
              fontFamily: 'Rubik',
            ),
          ),
        ),
        Expanded(
          child: Text(
            value,
            style: const TextStyle(fontSize: 14, fontFamily: 'Rubik'),
          ),
        ),
      ],
    );
  }

  Widget _buildResultItem(String title, String value) {
    return Column(
      children: [
        Text(
          title,
          style: TextStyle(
            fontSize: 14,
            color: AppColors.textSecondary,
            fontFamily: 'Rubik',
          ),
        ),
        const SizedBox(height: 4),
        Text(
          value,
          style: const TextStyle(
            fontSize: 16,
            fontWeight: FontWeight.w500,
            fontFamily: 'Rubik',
          ),
        ),
      ],
    );
  }
}
